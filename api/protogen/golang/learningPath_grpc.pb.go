// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: learningPath.proto

package content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LearningPathServiceClient is the client API for LearningPathService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LearningPathServiceClient interface {
	CreateLearningPath(ctx context.Context, in *LearningPath, opts ...grpc.CallOption) (*ReqID, error)
	UpdateLearningPath(ctx context.Context, in *LearningPath, opts ...grpc.CallOption) (*ReqID, error)
	DeleteLearningPath(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*ReqID, error)
	GetLearningPath(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*LearningPath, error)
}

type learningPathServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLearningPathServiceClient(cc grpc.ClientConnInterface) LearningPathServiceClient {
	return &learningPathServiceClient{cc}
}

func (c *learningPathServiceClient) CreateLearningPath(ctx context.Context, in *LearningPath, opts ...grpc.CallOption) (*ReqID, error) {
	out := new(ReqID)
	err := c.cc.Invoke(ctx, "/LearningPathService/CreateLearningPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPathServiceClient) UpdateLearningPath(ctx context.Context, in *LearningPath, opts ...grpc.CallOption) (*ReqID, error) {
	out := new(ReqID)
	err := c.cc.Invoke(ctx, "/LearningPathService/UpdateLearningPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPathServiceClient) DeleteLearningPath(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*ReqID, error) {
	out := new(ReqID)
	err := c.cc.Invoke(ctx, "/LearningPathService/DeleteLearningPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPathServiceClient) GetLearningPath(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*LearningPath, error) {
	out := new(LearningPath)
	err := c.cc.Invoke(ctx, "/LearningPathService/GetLearningPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearningPathServiceServer is the server API for LearningPathService service.
// All implementations must embed UnimplementedLearningPathServiceServer
// for forward compatibility
type LearningPathServiceServer interface {
	CreateLearningPath(context.Context, *LearningPath) (*ReqID, error)
	UpdateLearningPath(context.Context, *LearningPath) (*ReqID, error)
	DeleteLearningPath(context.Context, *ReqID) (*ReqID, error)
	GetLearningPath(context.Context, *ReqID) (*LearningPath, error)
	mustEmbedUnimplementedLearningPathServiceServer()
}

// UnimplementedLearningPathServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLearningPathServiceServer struct {
}

func (UnimplementedLearningPathServiceServer) CreateLearningPath(context.Context, *LearningPath) (*ReqID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLearningPath not implemented")
}
func (UnimplementedLearningPathServiceServer) UpdateLearningPath(context.Context, *LearningPath) (*ReqID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLearningPath not implemented")
}
func (UnimplementedLearningPathServiceServer) DeleteLearningPath(context.Context, *ReqID) (*ReqID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLearningPath not implemented")
}
func (UnimplementedLearningPathServiceServer) GetLearningPath(context.Context, *ReqID) (*LearningPath, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLearningPath not implemented")
}
func (UnimplementedLearningPathServiceServer) mustEmbedUnimplementedLearningPathServiceServer() {}

// UnsafeLearningPathServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearningPathServiceServer will
// result in compilation errors.
type UnsafeLearningPathServiceServer interface {
	mustEmbedUnimplementedLearningPathServiceServer()
}

func RegisterLearningPathServiceServer(s grpc.ServiceRegistrar, srv LearningPathServiceServer) {
	s.RegisterService(&LearningPathService_ServiceDesc, srv)
}

func _LearningPathService_CreateLearningPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPathServiceServer).CreateLearningPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPathService/CreateLearningPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPathServiceServer).CreateLearningPath(ctx, req.(*LearningPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPathService_UpdateLearningPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPathServiceServer).UpdateLearningPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPathService/UpdateLearningPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPathServiceServer).UpdateLearningPath(ctx, req.(*LearningPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPathService_DeleteLearningPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPathServiceServer).DeleteLearningPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPathService/DeleteLearningPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPathServiceServer).DeleteLearningPath(ctx, req.(*ReqID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPathService_GetLearningPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPathServiceServer).GetLearningPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPathService/GetLearningPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPathServiceServer).GetLearningPath(ctx, req.(*ReqID))
	}
	return interceptor(ctx, in, info, handler)
}

// LearningPathService_ServiceDesc is the grpc.ServiceDesc for LearningPathService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LearningPathService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LearningPathService",
	HandlerType: (*LearningPathServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLearningPath",
			Handler:    _LearningPathService_CreateLearningPath_Handler,
		},
		{
			MethodName: "UpdateLearningPath",
			Handler:    _LearningPathService_UpdateLearningPath_Handler,
		},
		{
			MethodName: "DeleteLearningPath",
			Handler:    _LearningPathService_DeleteLearningPath_Handler,
		},
		{
			MethodName: "GetLearningPath",
			Handler:    _LearningPathService_GetLearningPath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "learningPath.proto",
}
