// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: coursePage.proto

package content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoursePageServiceClient is the client API for CoursePageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoursePageServiceClient interface {
	CreateCoursePage(ctx context.Context, in *CoursePage, opts ...grpc.CallOption) (*ResOK, error)
	UpdateCoursePage(ctx context.Context, in *CoursePage, opts ...grpc.CallOption) (*ResOK, error)
	DeleteCoursePage(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*ResOK, error)
	GetCoursePage(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*CoursePage, error)
}

type coursePageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoursePageServiceClient(cc grpc.ClientConnInterface) CoursePageServiceClient {
	return &coursePageServiceClient{cc}
}

func (c *coursePageServiceClient) CreateCoursePage(ctx context.Context, in *CoursePage, opts ...grpc.CallOption) (*ResOK, error) {
	out := new(ResOK)
	err := c.cc.Invoke(ctx, "/CoursePageService/CreateCoursePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePageServiceClient) UpdateCoursePage(ctx context.Context, in *CoursePage, opts ...grpc.CallOption) (*ResOK, error) {
	out := new(ResOK)
	err := c.cc.Invoke(ctx, "/CoursePageService/UpdateCoursePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePageServiceClient) DeleteCoursePage(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*ResOK, error) {
	out := new(ResOK)
	err := c.cc.Invoke(ctx, "/CoursePageService/DeleteCoursePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePageServiceClient) GetCoursePage(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*CoursePage, error) {
	out := new(CoursePage)
	err := c.cc.Invoke(ctx, "/CoursePageService/GetCoursePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoursePageServiceServer is the server API for CoursePageService service.
// All implementations must embed UnimplementedCoursePageServiceServer
// for forward compatibility
type CoursePageServiceServer interface {
	CreateCoursePage(context.Context, *CoursePage) (*ResOK, error)
	UpdateCoursePage(context.Context, *CoursePage) (*ResOK, error)
	DeleteCoursePage(context.Context, *ReqID) (*ResOK, error)
	GetCoursePage(context.Context, *ReqID) (*CoursePage, error)
	mustEmbedUnimplementedCoursePageServiceServer()
}

// UnimplementedCoursePageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoursePageServiceServer struct {
}

func (UnimplementedCoursePageServiceServer) CreateCoursePage(context.Context, *CoursePage) (*ResOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoursePage not implemented")
}
func (UnimplementedCoursePageServiceServer) UpdateCoursePage(context.Context, *CoursePage) (*ResOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoursePage not implemented")
}
func (UnimplementedCoursePageServiceServer) DeleteCoursePage(context.Context, *ReqID) (*ResOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoursePage not implemented")
}
func (UnimplementedCoursePageServiceServer) GetCoursePage(context.Context, *ReqID) (*CoursePage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursePage not implemented")
}
func (UnimplementedCoursePageServiceServer) mustEmbedUnimplementedCoursePageServiceServer() {}

// UnsafeCoursePageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoursePageServiceServer will
// result in compilation errors.
type UnsafeCoursePageServiceServer interface {
	mustEmbedUnimplementedCoursePageServiceServer()
}

func RegisterCoursePageServiceServer(s grpc.ServiceRegistrar, srv CoursePageServiceServer) {
	s.RegisterService(&CoursePageService_ServiceDesc, srv)
}

func _CoursePageService_CreateCoursePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoursePage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePageServiceServer).CreateCoursePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoursePageService/CreateCoursePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePageServiceServer).CreateCoursePage(ctx, req.(*CoursePage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePageService_UpdateCoursePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoursePage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePageServiceServer).UpdateCoursePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoursePageService/UpdateCoursePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePageServiceServer).UpdateCoursePage(ctx, req.(*CoursePage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePageService_DeleteCoursePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePageServiceServer).DeleteCoursePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoursePageService/DeleteCoursePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePageServiceServer).DeleteCoursePage(ctx, req.(*ReqID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePageService_GetCoursePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePageServiceServer).GetCoursePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoursePageService/GetCoursePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePageServiceServer).GetCoursePage(ctx, req.(*ReqID))
	}
	return interceptor(ctx, in, info, handler)
}

// CoursePageService_ServiceDesc is the grpc.ServiceDesc for CoursePageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoursePageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CoursePageService",
	HandlerType: (*CoursePageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCoursePage",
			Handler:    _CoursePageService_CreateCoursePage_Handler,
		},
		{
			MethodName: "UpdateCoursePage",
			Handler:    _CoursePageService_UpdateCoursePage_Handler,
		},
		{
			MethodName: "DeleteCoursePage",
			Handler:    _CoursePageService_DeleteCoursePage_Handler,
		},
		{
			MethodName: "GetCoursePage",
			Handler:    _CoursePageService_GetCoursePage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coursePage.proto",
}
