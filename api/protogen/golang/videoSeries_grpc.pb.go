// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: videoSeries.proto

package content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoSeriesServiceClient is the client API for VideoSeriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoSeriesServiceClient interface {
	CreateVideoSeries(ctx context.Context, in *VideoSeries, opts ...grpc.CallOption) (*ResOK, error)
	UpdateVideoSeries(ctx context.Context, in *VideoSeries, opts ...grpc.CallOption) (*ResOK, error)
	DeleteVideoSeries(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*ResOK, error)
	GetVideoSeries(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*VideoSeries, error)
}

type videoSeriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoSeriesServiceClient(cc grpc.ClientConnInterface) VideoSeriesServiceClient {
	return &videoSeriesServiceClient{cc}
}

func (c *videoSeriesServiceClient) CreateVideoSeries(ctx context.Context, in *VideoSeries, opts ...grpc.CallOption) (*ResOK, error) {
	out := new(ResOK)
	err := c.cc.Invoke(ctx, "/VideoSeriesService/CreateVideoSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoSeriesServiceClient) UpdateVideoSeries(ctx context.Context, in *VideoSeries, opts ...grpc.CallOption) (*ResOK, error) {
	out := new(ResOK)
	err := c.cc.Invoke(ctx, "/VideoSeriesService/UpdateVideoSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoSeriesServiceClient) DeleteVideoSeries(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*ResOK, error) {
	out := new(ResOK)
	err := c.cc.Invoke(ctx, "/VideoSeriesService/DeleteVideoSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoSeriesServiceClient) GetVideoSeries(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*VideoSeries, error) {
	out := new(VideoSeries)
	err := c.cc.Invoke(ctx, "/VideoSeriesService/GetVideoSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoSeriesServiceServer is the server API for VideoSeriesService service.
// All implementations must embed UnimplementedVideoSeriesServiceServer
// for forward compatibility
type VideoSeriesServiceServer interface {
	CreateVideoSeries(context.Context, *VideoSeries) (*ResOK, error)
	UpdateVideoSeries(context.Context, *VideoSeries) (*ResOK, error)
	DeleteVideoSeries(context.Context, *ReqID) (*ResOK, error)
	GetVideoSeries(context.Context, *ReqID) (*VideoSeries, error)
	mustEmbedUnimplementedVideoSeriesServiceServer()
}

// UnimplementedVideoSeriesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoSeriesServiceServer struct {
}

func (UnimplementedVideoSeriesServiceServer) CreateVideoSeries(context.Context, *VideoSeries) (*ResOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideoSeries not implemented")
}
func (UnimplementedVideoSeriesServiceServer) UpdateVideoSeries(context.Context, *VideoSeries) (*ResOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideoSeries not implemented")
}
func (UnimplementedVideoSeriesServiceServer) DeleteVideoSeries(context.Context, *ReqID) (*ResOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideoSeries not implemented")
}
func (UnimplementedVideoSeriesServiceServer) GetVideoSeries(context.Context, *ReqID) (*VideoSeries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoSeries not implemented")
}
func (UnimplementedVideoSeriesServiceServer) mustEmbedUnimplementedVideoSeriesServiceServer() {}

// UnsafeVideoSeriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoSeriesServiceServer will
// result in compilation errors.
type UnsafeVideoSeriesServiceServer interface {
	mustEmbedUnimplementedVideoSeriesServiceServer()
}

func RegisterVideoSeriesServiceServer(s grpc.ServiceRegistrar, srv VideoSeriesServiceServer) {
	s.RegisterService(&VideoSeriesService_ServiceDesc, srv)
}

func _VideoSeriesService_CreateVideoSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoSeries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoSeriesServiceServer).CreateVideoSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoSeriesService/CreateVideoSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoSeriesServiceServer).CreateVideoSeries(ctx, req.(*VideoSeries))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoSeriesService_UpdateVideoSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoSeries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoSeriesServiceServer).UpdateVideoSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoSeriesService/UpdateVideoSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoSeriesServiceServer).UpdateVideoSeries(ctx, req.(*VideoSeries))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoSeriesService_DeleteVideoSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoSeriesServiceServer).DeleteVideoSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoSeriesService/DeleteVideoSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoSeriesServiceServer).DeleteVideoSeries(ctx, req.(*ReqID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoSeriesService_GetVideoSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoSeriesServiceServer).GetVideoSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoSeriesService/GetVideoSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoSeriesServiceServer).GetVideoSeries(ctx, req.(*ReqID))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoSeriesService_ServiceDesc is the grpc.ServiceDesc for VideoSeriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoSeriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VideoSeriesService",
	HandlerType: (*VideoSeriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVideoSeries",
			Handler:    _VideoSeriesService_CreateVideoSeries_Handler,
		},
		{
			MethodName: "UpdateVideoSeries",
			Handler:    _VideoSeriesService_UpdateVideoSeries_Handler,
		},
		{
			MethodName: "DeleteVideoSeries",
			Handler:    _VideoSeriesService_DeleteVideoSeries_Handler,
		},
		{
			MethodName: "GetVideoSeries",
			Handler:    _VideoSeriesService_GetVideoSeries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "videoSeries.proto",
}
