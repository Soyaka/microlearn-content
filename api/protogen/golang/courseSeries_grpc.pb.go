// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: courseSeries.proto

package content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CourseSeriesServiceClient is the client API for CourseSeriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseSeriesServiceClient interface {
	CreateCourseSeries(ctx context.Context, in *Course, opts ...grpc.CallOption) (*ReqID, error)
	UpdateCourseSeries(ctx context.Context, in *Course, opts ...grpc.CallOption) (*ReqID, error)
	DeleteCourseSeries(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*ReqID, error)
	GetCourseSeries(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*Course, error)
}

type courseSeriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseSeriesServiceClient(cc grpc.ClientConnInterface) CourseSeriesServiceClient {
	return &courseSeriesServiceClient{cc}
}

func (c *courseSeriesServiceClient) CreateCourseSeries(ctx context.Context, in *Course, opts ...grpc.CallOption) (*ReqID, error) {
	out := new(ReqID)
	err := c.cc.Invoke(ctx, "/CourseSeriesService/CreateCourseSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseSeriesServiceClient) UpdateCourseSeries(ctx context.Context, in *Course, opts ...grpc.CallOption) (*ReqID, error) {
	out := new(ReqID)
	err := c.cc.Invoke(ctx, "/CourseSeriesService/UpdateCourseSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseSeriesServiceClient) DeleteCourseSeries(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*ReqID, error) {
	out := new(ReqID)
	err := c.cc.Invoke(ctx, "/CourseSeriesService/DeleteCourseSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseSeriesServiceClient) GetCourseSeries(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*Course, error) {
	out := new(Course)
	err := c.cc.Invoke(ctx, "/CourseSeriesService/GetCourseSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseSeriesServiceServer is the server API for CourseSeriesService service.
// All implementations must embed UnimplementedCourseSeriesServiceServer
// for forward compatibility
type CourseSeriesServiceServer interface {
	CreateCourseSeries(context.Context, *Course) (*ReqID, error)
	UpdateCourseSeries(context.Context, *Course) (*ReqID, error)
	DeleteCourseSeries(context.Context, *ReqID) (*ReqID, error)
	GetCourseSeries(context.Context, *ReqID) (*Course, error)
	mustEmbedUnimplementedCourseSeriesServiceServer()
}

// UnimplementedCourseSeriesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCourseSeriesServiceServer struct {
}

func (UnimplementedCourseSeriesServiceServer) CreateCourseSeries(context.Context, *Course) (*ReqID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourseSeries not implemented")
}
func (UnimplementedCourseSeriesServiceServer) UpdateCourseSeries(context.Context, *Course) (*ReqID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourseSeries not implemented")
}
func (UnimplementedCourseSeriesServiceServer) DeleteCourseSeries(context.Context, *ReqID) (*ReqID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourseSeries not implemented")
}
func (UnimplementedCourseSeriesServiceServer) GetCourseSeries(context.Context, *ReqID) (*Course, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseSeries not implemented")
}
func (UnimplementedCourseSeriesServiceServer) mustEmbedUnimplementedCourseSeriesServiceServer() {}

// UnsafeCourseSeriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseSeriesServiceServer will
// result in compilation errors.
type UnsafeCourseSeriesServiceServer interface {
	mustEmbedUnimplementedCourseSeriesServiceServer()
}

func RegisterCourseSeriesServiceServer(s grpc.ServiceRegistrar, srv CourseSeriesServiceServer) {
	s.RegisterService(&CourseSeriesService_ServiceDesc, srv)
}

func _CourseSeriesService_CreateCourseSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Course)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseSeriesServiceServer).CreateCourseSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CourseSeriesService/CreateCourseSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseSeriesServiceServer).CreateCourseSeries(ctx, req.(*Course))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseSeriesService_UpdateCourseSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Course)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseSeriesServiceServer).UpdateCourseSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CourseSeriesService/UpdateCourseSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseSeriesServiceServer).UpdateCourseSeries(ctx, req.(*Course))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseSeriesService_DeleteCourseSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseSeriesServiceServer).DeleteCourseSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CourseSeriesService/DeleteCourseSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseSeriesServiceServer).DeleteCourseSeries(ctx, req.(*ReqID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseSeriesService_GetCourseSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseSeriesServiceServer).GetCourseSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CourseSeriesService/GetCourseSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseSeriesServiceServer).GetCourseSeries(ctx, req.(*ReqID))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseSeriesService_ServiceDesc is the grpc.ServiceDesc for CourseSeriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseSeriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CourseSeriesService",
	HandlerType: (*CourseSeriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCourseSeries",
			Handler:    _CourseSeriesService_CreateCourseSeries_Handler,
		},
		{
			MethodName: "UpdateCourseSeries",
			Handler:    _CourseSeriesService_UpdateCourseSeries_Handler,
		},
		{
			MethodName: "DeleteCourseSeries",
			Handler:    _CourseSeriesService_DeleteCourseSeries_Handler,
		},
		{
			MethodName: "GetCourseSeries",
			Handler:    _CourseSeriesService_GetCourseSeries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "courseSeries.proto",
}
